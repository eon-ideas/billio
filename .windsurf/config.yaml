# Billio - Invoice Management System
# Windsurf Rules Configuration

# Project Overview
# ---------------
# Billio is an invoice management application with role-based access control
# Built with Vue 3, TypeScript, Tailwind CSS, and Supabase

# Technical Stack
tech_stack:
  frontend:
    framework: "Vue 3"
    language: "TypeScript"
    styling: "Tailwind CSS"
    state_management: "Pinia"
    router: "Vue Router"
  backend:
    database: "Supabase"
    authentication: "Supabase Auth"
    hosting: "Netlify"

# Code Conventions
# ---------------
conventions:
  general:
    language: "English"
    indent: 2
    max_line_length: 100
    quotes: "single"
    semicolons: true
  
  typescript:
    strict: true
    avoid_any: true
    prefer_interfaces: true
    
  vue:
    use_composition_api: true
    use_script_setup: true
    component_naming: "PascalCase"
    prop_validation: true
    
  file_structure:
    views: "src/views"
    components: "src/components"
    stores: "src/stores"
    composables: "src/composables"
    types: "src/types"

# Application Features
# ------------------
features:
  role_based_access:
    enabled: true
    roles:
      - name: "ADMIN"
        description: "Full CRUD access to all database tables"
      - name: "USER"
        description: "Limited access based on role permissions"
    ui_indicators:
      - "Purple ADMIN badge for admin users"
  
  currency_exchange:
    enabled: true
    description: "Exchange rate calculation for non-EUR currencies"
    implementation:
      - "Automatic rate fetching from Billio backend API"
      - "Conditional input field in InvoiceForm"
      - "Exchange rate as value of 1 unit customer currency in EUR"

# Database Configuration
# --------------------
database:
  provider: "Supabase"
  security:
    row_level_security: true
  tables:
    - name: "company_info"
      access:
        admin: "CRUD"
        user: "READ"
    - name: "email_templates"
      access:
        admin: "CRUD"
        user: "READ"
    - name: "customers"
      access:
        admin: "CRUD"
        user: "CRUD"
    - name: "invoices"
      access:
        admin: "CRUD"
        user: "CRUD"
    - name: "invoice_items"
      access:
        admin: "CRUD"
        user: "CRUD"
    - name: "user_roles"
      access:
        admin: "CRUD"
        user: "NONE"

# Development Workflow
# ------------------
workflow:
  commands:
    dev: "npm run dev"
    build: "npm run build"
    preview: "npm run preview"
    type_check: "npm run type-check"
  
  output_dir: "dist"
  
  deployment:
    provider: "Netlify"
    config_file: "netlify.toml"
  
  feature_implementation:
    pre_implementation:
      - "Review README.md for existing feature documentation and context"
      - "Understand how new feature integrates with existing functionality"
      - "Check for related features in the codebase"
    
    post_implementation:
      - "Update README.md with new feature documentation"
      - "Include implementation details in technical documentation"
      - "Update any affected existing documentation"

# Documentation
# ------------
documentation:
  readme: "README.md"
  update_rules:
    - rule: "Always update README.md after implementing new features"
      sections_to_update:
        - "Features": "Add a brief description of the new feature"
        - "Implementation Details": "Add technical details if relevant"
        - "User Roles and Permissions": "Update if feature affects permissions"
    
    - rule: "Always consult README.md before implementing new features"
      purpose: "Ensure consistency with existing features and documentation"
    
    - rule: "Keep documentation up-to-date with the codebase"
      frequency: "Immediately after feature implementation"
    
    - rule: "Document changes to database schema"
      location: "Database Migrations section"
    
    - rule: "Document changes to user roles and permissions"
      location: "User Roles and Permissions section"
  
# Ignore patterns
# -------------
ignore:
  - "node_modules"
  - ".temp"
  - "dist"
  - ".env"
  - "*.log"
